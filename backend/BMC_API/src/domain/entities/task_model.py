from sqlalchemy.orm import relationship
from sqlalchemy.sql.schema import Column, ForeignKey
from sqlalchemy.sql.sqltypes import JSON, Boolean, DateTime, Integer, String

from BMC_API.src.domain.value_objects.enums.challenge_enums import ChallengeStatus
from BMC_API.src.infrastructure.persistence.base import Base


class TaskModel(Base):
    """Model for tasks."""

    __tablename__ = "tasks"

    id = Column(Integer, primary_key=True, index=True)
    version = Column(Integer, default=1)
    histories = relationship("TaskHistoryModel", back_populates="task", lazy="selectin")
    task_created_time = Column(DateTime, nullable=False)
    task_modified_time = Column(DateTime)
    task_submission_time = Column(DateTime)
    task_abstract = Column(String)
    task_acquisition_devices = Column(String)
    task_acquisition_protocol = Column(String)
    task_algorithm_target = Column(String)
    task_annoation_instructions = Column(String)
    task_annotation_aggregation = Column(String)
    task_annotators = Column(String)
    task_assesment_aim = Column(String)
    task_author_emails = Column(JSON)
    task_author_names = Column(JSON)
    task_award_policy = Column(String)
    task_case_definition = Column(String)
    task_center = Column(String)
    task_challenge_id = Column(Integer, ForeignKey("challenges.id"))
    task_challenge = relationship(
        "ChallengeModel", back_populates="challenge_tasks", lazy="selectin"
    )
    task_challenge_cohort = Column(String)
    # task_challenge_schedule = Column(String)
    task_characteristic_data = Column(String)
    task_code_availability_organizers = Column(String)
    task_code_availability_participants = Column(String)
    task_conference_name = Column(String)
    task_conflict_of_interest = Column(String)
    task_contact_person = Column(String)
    task_contex_information_data = Column(String)
    task_contex_information_patient = Column(String)
    task_data_origin = Column(String)
    # task_data_usage_agreement_comments = Column(String)
    task_ethics_approval = Column(String)
    task_evaluation_metrics = Column(String)
    task_explanation_number_proportion_data = Column(String)
    task_field_of_application = Column(String)
    task_further_analyses = Column(String)
    task_imaging_modalities = Column(String)
    # task_interaction_level_list = Column(String)
    task_interaction_level_policy = Column(String)
    task_justification_of_data_characteristics = Column(String)
    task_justification_of_metrics = Column(String)
    task_justification_of_rank_computation_method = Column(String)
    task_justification_of_statistical_analyses = Column(String)
    task_keywords = Column(JSON)
    task_licence = Column(String)
    task_lifecycle = Column(String)
    task_locked = Column(Boolean, default=False)
    task_metod_reference = Column(String)
    task_missing_data = Column(String)
    task_name = Column(String)
    task_new_data = Column(String)
    task_number_of_cases = Column(String)
    # task_operators = Column(String)
    task_organizer_participation_policy = Column(String)
    task_organizing_team = Column(String)
    task_owner = relationship("UserModel", back_populates="tasks", lazy="selectin")
    task_owner_id = Column(Integer, ForeignKey("users.id"))
    # task_participation_policy = Column(String)
    task_platform = Column(String)
    task_pre_evaluation = Column(String)
    task_pre_processing_methods = Column(String)
    task_pulication_policy = Column(String)
    task_rank_computation_method = Column(String)
    task_results_announcement = Column(String)
    task_result_submission_method = Column(String)
    task_schedule = Column(String)
    task_sources_of_error_images = Column(String)
    task_sources_of_error_other = Column(String)
    task_statistical_analyses = Column(String)
    task_status = Column(String, default=ChallengeStatus.DRAFT)
    # task_submission_instructions = Column(String)
    task_target_cohort = Column(String)
    task_task_category = Column(String)
    task_training_data_policy = Column(String)
    task_url = Column(String)
