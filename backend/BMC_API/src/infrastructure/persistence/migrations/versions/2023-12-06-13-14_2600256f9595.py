"""empty message

Revision ID: 2600256f9595
Revises: 
Create Date: 2023-12-06 13:14:15.653454

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "2600256f9595"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("bio", sa.Text(), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("created_time", sa.DateTime(), nullable=False),
        sa.Column("disabled", sa.Boolean(), nullable=True),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("email_confirmation_token", sa.String(length=100), nullable=True),
        sa.Column("email_confirmed", sa.Boolean(), nullable=True),
        sa.Column("first_name", sa.String(length=50), nullable=True),
        sa.Column("institution", sa.String(length=100), nullable=True),
        sa.Column("last_login_time", sa.DateTime(), nullable=True),
        sa.Column("last_name", sa.String(length=50), nullable=True),
        sa.Column("modified_time", sa.DateTime(), nullable=True),
        sa.Column("newsletter", sa.Boolean(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("notifications", sa.JSON(), nullable=True),
        sa.Column("password", sa.String(length=100), nullable=False),
        sa.Column("reset_token", sa.String(length=100), nullable=True),
        sa.Column("roles", sa.JSON(), nullable=True),
        sa.Column("titel", sa.String(length=10), nullable=True),
        sa.Column("token_expiry", sa.DateTime(), nullable=True),
        sa.Column("website", sa.String(length=100), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("reset_token"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "conferences",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("city", sa.String(length=255), nullable=True),
        sa.Column("country", sa.String(length=255), nullable=True),
        sa.Column("created_time", sa.DateTime(), nullable=False),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("information", sa.String(length=2000), nullable=True),
        sa.Column("modified_time", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("proposal_start_date", sa.DateTime(), nullable=True),
        sa.Column("proposal_end_date", sa.DateTime(), nullable=True),
        sa.Column("short_name", sa.String(length=255), nullable=True),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("venue", sa.String(length=255), nullable=True),
        sa.Column("chairperson_emails", sa.JSON(), nullable=True),
        sa.Column("chairperson_names", sa.JSON(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_conferences_id"), "conferences", ["id"], unique=False)
    op.create_table(
        "challenges",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("challenge_created_time", sa.DateTime(), nullable=False),
        sa.Column("challenge_modified_time", sa.DateTime(), nullable=True),
        sa.Column("challenge_abstract", sa.String(), nullable=True),
        sa.Column("challenge_acronym", sa.String(length=255), nullable=True),
        sa.Column("challenge_author_emails", sa.JSON(), nullable=True),
        sa.Column("challenge_author_names", sa.JSON(), nullable=True),
        sa.Column("challenge_conference_id", sa.Integer(), nullable=True),
        sa.Column("challenge_doi", sa.String(length=255), nullable=True),
        sa.Column("challenge_duration", sa.String(), nullable=True),
        sa.Column(
            "challenge_expected_number_of_participants", sa.String(), nullable=True
        ),
        sa.Column("challenge_feedback", sa.String(), nullable=True),
        sa.Column("challenge_file", sa.String(), nullable=True),
        sa.Column("challenge_first_feedback_status", sa.String(), nullable=True),
        sa.Column("challenge_first_feedback_time", sa.DateTime(), nullable=True),
        sa.Column("challenge_further_comments", sa.String(), nullable=True),
        sa.Column(
            "challenge_interested_in_nvidia_resources", sa.Boolean(), nullable=True
        ),
        sa.Column("challenge_keywords", sa.JSON(), nullable=True),
        sa.Column("challenge_locked", sa.Boolean(), nullable=True),
        sa.Column("challenge_name", sa.String(), nullable=True),
        sa.Column("challenge_owner_id", sa.Integer(), nullable=True),
        sa.Column("challenge_progress", sa.String(), nullable=True),
        sa.Column("challenge_publication_and_future", sa.String(), nullable=True),
        sa.Column("challenge_references", sa.String(), nullable=True),
        sa.Column("challenge_reviewer_status", sa.String(), nullable=True),
        sa.Column(
            "challenge_space_and_hardware_requirements", sa.String(), nullable=True
        ),
        sa.Column("challenge_status", sa.String(), nullable=True),
        sa.Column("challenge_submission_time", sa.DateTime(), nullable=True),
        sa.Column("challenge_super_reviewer_status", sa.String(), nullable=True),
        sa.Column("challenge_workshop", sa.String(), nullable=True),
        sa.Column("challenge_year", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["challenge_conference_id"],
            ["conferences.id"],
        ),
        sa.ForeignKeyConstraint(
            ["challenge_owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_challenges_id"), "challenges", ["id"], unique=False)
    op.create_table(
        "tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_created_time", sa.DateTime(), nullable=False),
        sa.Column("task_modified_time", sa.DateTime(), nullable=True),
        sa.Column("task_submission_time", sa.DateTime(), nullable=True),
        sa.Column("task_abstract", sa.String(), nullable=True),
        sa.Column("task_acquisition_devices", sa.String(), nullable=True),
        sa.Column("task_acquisition_protocol", sa.String(), nullable=True),
        sa.Column("task_algorithm_target", sa.String(), nullable=True),
        sa.Column("task_annoation_instructions", sa.String(), nullable=True),
        sa.Column("task_annotation_aggregation", sa.String(), nullable=True),
        sa.Column("task_annotators", sa.String(), nullable=True),
        sa.Column("task_assesment_aim", sa.String(), nullable=True),
        sa.Column("task_author_emails", sa.JSON(), nullable=True),
        sa.Column("task_author_names", sa.JSON(), nullable=True),
        sa.Column("task_award_policy", sa.String(), nullable=True),
        sa.Column("task_case_definition", sa.String(), nullable=True),
        sa.Column("task_center", sa.String(), nullable=True),
        sa.Column("task_challenge_id", sa.Integer(), nullable=True),
        sa.Column("task_challenge_cohort", sa.String(), nullable=True),
        sa.Column("task_characteristic_data", sa.String(), nullable=True),
        sa.Column("task_code_availability_organizers", sa.String(), nullable=True),
        sa.Column("task_code_availability_participants", sa.String(), nullable=True),
        sa.Column("task_conference_name", sa.String(), nullable=True),
        sa.Column("task_conflict_of_interest", sa.String(), nullable=True),
        sa.Column("task_contact_person", sa.String(), nullable=True),
        sa.Column("task_contex_information_data", sa.String(), nullable=True),
        sa.Column("task_contex_information_patient", sa.String(), nullable=True),
        sa.Column("task_data_origin", sa.String(), nullable=True),
        sa.Column("task_ethics_approval", sa.String(), nullable=True),
        sa.Column("task_evaluation_metrics", sa.String(), nullable=True),
        sa.Column(
            "task_explanation_number_proportion_data", sa.String(), nullable=True
        ),
        sa.Column("task_field_of_application", sa.String(), nullable=True),
        sa.Column("task_further_analyses", sa.String(), nullable=True),
        sa.Column("task_imaging_modalities", sa.String(), nullable=True),
        sa.Column("task_interaction_level_policy", sa.String(), nullable=True),
        sa.Column(
            "task_justification_of_data_characteristics", sa.String(), nullable=True
        ),
        sa.Column("task_justification_of_metrics", sa.String(), nullable=True),
        sa.Column(
            "task_justification_of_rank_computation_method", sa.String(), nullable=True
        ),
        sa.Column(
            "task_justification_of_statistical_analyses", sa.String(), nullable=True
        ),
        sa.Column("task_keywords", sa.JSON(), nullable=True),
        sa.Column("task_licence", sa.String(), nullable=True),
        sa.Column("task_lifecycle", sa.String(), nullable=True),
        sa.Column("task_locked", sa.Boolean(), nullable=True),
        sa.Column("task_metod_reference", sa.String(), nullable=True),
        sa.Column("task_missing_data", sa.String(), nullable=True),
        sa.Column("task_name", sa.String(), nullable=True),
        sa.Column("task_number_of_cases", sa.String(), nullable=True),
        sa.Column("task_organizer_participation_policy", sa.String(), nullable=True),
        sa.Column("task_organizing_team", sa.String(), nullable=True),
        sa.Column("task_owner_id", sa.Integer(), nullable=True),
        sa.Column("task_platform", sa.String(), nullable=True),
        sa.Column("task_pre_evaluation", sa.String(), nullable=True),
        sa.Column("task_pre_processing_methods", sa.String(), nullable=True),
        sa.Column("task_pulication_policy", sa.String(), nullable=True),
        sa.Column("task_rank_computation_method", sa.String(), nullable=True),
        sa.Column("task_results_announcement", sa.String(), nullable=True),
        sa.Column("task_result_submission_method", sa.String(), nullable=True),
        sa.Column("task_schedule", sa.String(), nullable=True),
        sa.Column("task_sources_of_error_images", sa.String(), nullable=True),
        sa.Column("task_sources_of_error_other", sa.String(), nullable=True),
        sa.Column("task_statistical_analyses", sa.String(), nullable=True),
        sa.Column("task_status", sa.String(), nullable=True),
        sa.Column("task_target_cohort", sa.String(), nullable=True),
        sa.Column("task_task_category", sa.String(), nullable=True),
        sa.Column("task_training_data_policy", sa.String(), nullable=True),
        sa.Column("task_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["task_challenge_id"],
            ["challenges.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_tasks_id"), "tasks", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tasks_id"), table_name="tasks")
    op.drop_table("tasks")
    op.drop_index(op.f("ix_challenges_id"), table_name="challenges")
    op.drop_table("challenges")
    op.drop_index(op.f("ix_conferences_id"), table_name="conferences")
    op.drop_table("conferences")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
